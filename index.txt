# Chapter 1

Nothing to implement

# Chapter 2: Algorithms and Data Structures

2-*: Implement recursive version of Quicksort.
2-1: Implement iterative version of Quicksort. 
2-3: Find input sequences that lead to worst-case behaviours and provoke implementation(s) to running slowly. Automate the process so that one can specify and perform a large amount of experiments easily.
2-4: Design and implement maximally slow sorting algorithm.
2-6: Implement dynamic array.
2-7: Implement simply-linked list.
2-8: Write recursive and iterative versions of reverse (reverses order of list elements).
2-9: Write generic list type.
2-10: Devise and implement set of tests to verify correctness of list.
2-11: Implement tree and compare performance of lookup and nrlookup.
2-12: Use in-order traversal to create a sort routine.
2-13: Devise and implement a set of tests for verifying that the tree routines are correct.
2-14: Implement hash table. Construct data set that causes hash function to perform badly.
2-15: Write a function to access the successive elements of the hash table in unsorted order.
2-16: Change lookup so that if the average list length becomes more than x, the array is grown automatically by a factor of y and the hash table is rebuilt.
2-17: Design a hash function for storing the points in 2 dimensions.

# Chapter 3: Design and implementation

3-*: Implement Markov chain program.
3-1: Design and carry out experiments to determine how well the method (random number generator) works in practice.
3-2: Implement version of program using second hash table and compare performance.
3-3: Implement version not using sentinels.

# Chapter 4: Interfaces

4-*: Implement library to read CSV data and to convert it into an internal representation.

# Chapter 5: Debugging

5-*: Implement strings program.
5-2: Provide strings with an optional argument to define the minimal string length.
5-3: Write vis program.
5-5: Extend vis to process a sequence of files, fold long lines at any desired column and remove non-printable characters completely.

# Chapter 6: Testing

6-4: Design and implement a version of freq that measures the frequencies of other types of data values, such as 32-bit integers or floating-point numbers. Can you make one version of the program handle a variety of types elegantly?
6-5: Design a test suite for printf (use golang equivalent instead), using as many mechanical aids as possible.
6-8: Specify a testing regime for numerical routines like sqrt, sin, and so on, as found in math.h. What input values make sense? What independent checks can be performed?
6-9: Define mechansims for testing the functions of the C str... family, like strcmp (use golang equivalent instead).
6-10: Try to create a file that will crash your favorite text editor, compiler, or other program.

# Chapter 7: Performance

7-1: Implement version of isspam that uses two characters as the index.
7-2: Use clock or getTime to write a timing facility for your own use. Compare its time to a wall clock. How does other activity on the machine affect the timings.
7-6: Create a set of tests for estimating the costs of basic operations for computers and compilers near you, and investigate similarities and differences in performance. Note: Use C benchmark program including fork() from CC course.
7-7: Create a cost model for higher-level oprations in Go. Concentrate on small set of representative operations.

# Chapter 8: Portability

8-2: Write a program to remove spurious carriage returns from a file. Write a second program to add them by replacing each newline with a carriage return and newline. How would you test these programs?

# Chapter 9: Notation

9-1: Modify pack and unpack to transmit signed values correctly, even between machines with different sizes for short and long.
9-2: Extend pack und unpack to handle strings.
9-4: Write a command-line version of printf that prints its second and subsequent arguments in the format given by its first argument.
9-5: Write a function that implements the format specifications found in spreadsheet programs, which display numbers according to patterns that indiate mandatory and optional digits, location of decimal points and commas, and so on.

9-*: Implemnt grep program.
9-7: Write non-recursive version of matchhere and compare its performance to the recursive version.    
9-8: Add some options to grep.
9-9: Add the + and ? operator to match.
9-10: Fix match to handle backslashes.
9-11: Add character classes to match.
9-12: Change match to use the leftmost-longest version of matchstar, and modify it to return the character position of the beginning and end of the matched text. Use that to build a program gres that is like grep but prints every input line after substituting new text for text that matches the pattern, as in ...
9-13: Modiy match and grep to work with UTF-8 strings of Unicode characters.
9-14: Write an automatic tester for regular expressions that generates test expressions and test strings to search.

9-15: Write a program that when executed will reproduce itself exactly, in source form.
9-17: Exercise 7-8 involved doing a cost model for Java, which has no macro capability. Solve the problem by writing another program, in whatever language you choose, that writes the Java version and automates the timing runs.